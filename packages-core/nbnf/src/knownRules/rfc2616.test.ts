import test from 'ava';
import {parseRFC2616} from './rfc2616';
import {toNodes, runTests} from './util.test';

runTests(test, parseRFC2616, [
    {input: 'ÿ', rule: 'OCTET', expected: {name: 'OCTET', nodes: toNodes('ÿ')}},
    {input: 'Ā', rule: 'OCTET'},
    {input: 'a', rule: 'CHAR', expected: {name: 'CHAR', nodes: toNodes('a')}},
    {input: 'ÿ', rule: 'CHAR'},
    {input: 'A', rule: 'UPALPHA', expected: {name: 'UPALPHA', nodes: toNodes('A')}},
    {input: 'a', rule: 'UPALPHA'},
    {input: 'A', rule: 'LOALPHA'},
    {input: 'a', rule: 'LOALPHA', expected: {name: 'LOALPHA', nodes: toNodes('a')}},
    {input: 'a', rule: 'ALPHA', expected: {name: 'ALPHA', nodes: toNodes('a')}},
    {input: 'A', rule: 'ALPHA', expected: {name: 'ALPHA', nodes: toNodes('A')}},
    {input: '0', rule: 'ALPHA'},
    {input: 'A', rule: 'DIGIT'},
    {input: '0', rule: 'DIGIT', expected: {name: 'DIGIT', nodes: toNodes('0')}},
    {input: [0], rule: 'CTL', expected: {name: 'CTL', nodes: toNodes(0)}},
    {input: '\n', rule: 'CTL', expected: {name: 'CTL', nodes: toNodes('\n')}},
    {input: 'A', rule: 'CTL'},
    {input: '\r', rule: 'CR', expected: {name: 'CR', nodes: toNodes('\r')}},
    {input: 'A', rule: 'CR'},
    {input: '\n', rule: 'LF', expected: {name: 'LF', nodes: toNodes('\n')}},
    {input: 'A', rule: 'LF'},
    {input: ' ', rule: 'SP', expected: {name: 'SP', nodes: toNodes(' ')}},
    {input: 'A', rule: 'SP'},
    {input: '\t', rule: 'HT', expected: {name: 'HT', nodes: toNodes('\t')}},
    {input: 'A', rule: 'HT'},
    {input: '"', rule: '<">', expected: {name: '<">', nodes: toNodes('"')}},
    {input: 'A', rule: '<">'},
    {input: '\r\n', rule: 'CRLF', expected: {name: 'CRLF', nodes: toNodes('\r\n')}},
    {input: '\r', rule: 'CRLF'},
    {input: '\r\n ', rule: 'LWS', expected: {name: 'LWS', nodes: toNodes('\r\n ')}},
    {input: '\r\n \t', rule: 'LWS', expected: {name: 'LWS', nodes: toNodes('\r\n \t')}},
    {input: ' \t \t', rule: 'LWS', expected: {name: 'LWS', nodes: toNodes(' \t \t')}},
    {input: '\r\n ', rule: 'TEXT', expected: {name: 'TEXT', nodes: toNodes('\r\n ')}},
    {input: '\r\n \t', rule: 'TEXT', expected: {name: 'TEXT', nodes: toNodes('\r\n \t')}},
    {input: ' \t', rule: 'TEXT', expected: {name: 'TEXT', nodes: toNodes(' ')}},
    {input: 'FOO', rule: 'TEXT', expected: {name: 'TEXT', nodes: toNodes('F')}},
    {input: '\n', rule: 'TEXT'},
    {input: '1', rule: 'HEX', expected: {name: 'HEX', nodes: toNodes('1')}},
    {input: 'f', rule: 'HEX', expected: {name: 'HEX', nodes: toNodes('f')}},
    {input: 'F', rule: 'HEX', expected: {name: 'HEX', nodes: toNodes('F')}},
    {input: 'G', rule: 'HEX'},
    {input: '(', rule: 'separators', expected: {name: 'separators', nodes: toNodes('(')}},
    {input: ')', rule: 'separators', expected: {name: 'separators', nodes: toNodes(')')}},
    {input: '<', rule: 'separators', expected: {name: 'separators', nodes: toNodes('<')}},
    {input: '>', rule: 'separators', expected: {name: 'separators', nodes: toNodes('>')}},
    {input: '@', rule: 'separators', expected: {name: 'separators', nodes: toNodes('@')}},
    {input: ',', rule: 'separators', expected: {name: 'separators', nodes: toNodes(',')}},
    {input: ';', rule: 'separators', expected: {name: 'separators', nodes: toNodes(';')}},
    {input: ':', rule: 'separators', expected: {name: 'separators', nodes: toNodes(':')}},
    {input: '\\', rule: 'separators', expected: {name: 'separators', nodes: toNodes('\\')}},
    {input: '"', rule: 'separators', expected: {name: 'separators', nodes: toNodes('"')}},
    {input: '/', rule: 'separators', expected: {name: 'separators', nodes: toNodes('/')}},
    {input: '[', rule: 'separators', expected: {name: 'separators', nodes: toNodes('[')}},
    {input: ']', rule: 'separators', expected: {name: 'separators', nodes: toNodes(']')}},
    {input: '?', rule: 'separators', expected: {name: 'separators', nodes: toNodes('?')}},
    {input: '=', rule: 'separators', expected: {name: 'separators', nodes: toNodes('=')}},
    {input: '{', rule: 'separators', expected: {name: 'separators', nodes: toNodes('{')}},
    {input: '}', rule: 'separators', expected: {name: 'separators', nodes: toNodes('}')}},
    {input: ' ', rule: 'separators', expected: {name: 'separators', nodes: toNodes(' ')}},
    {input: '\t', rule: 'separators', expected: {name: 'separators', nodes: toNodes('\t')}},
    {input: 'foo()', rule: 'token', expected: {name: 'token', nodes: toNodes('foo')}},
    {input: '(', rule: 'token'},
    {input: 'foo', rule: 'ctext', expected: {name: 'ctext', nodes: toNodes('f')}},
    {input: '(', rule: 'ctext'},
    {input: '\\(', rule: 'quoted-pair', expected: {name: 'quoted-pair', nodes: toNodes('\\(')}},
    {input: 'FOO', rule: 'qdtext', expected: {name: 'qdtext', nodes: toNodes('F')}},
    {input: '"', rule: 'qdtext'},
    {input: '"FOObar"', rule: 'quoted-string', expected: {name: 'quoted-string', nodes: toNodes('"FOObar"')}},
    {input: '"FOO\\"bar"', rule: 'quoted-string', expected: {name: 'quoted-string', nodes: toNodes('"FOO\\"bar"')}},
    {input: '(fooBAR)', rule: 'comment', expected: {name: 'comment', nodes: toNodes('(fooBAR)')}},
    {
        input: 'Sun, 06 Nov 1994 08:49:37 GMT',
        rule: 'HTTP-date',
        expected: {
            name: 'HTTP-date',
            nodes: toNodes('Sun, 06 Nov 1994 08:49:37 GMT'),
        },
    },
    {
        input: 'Sun, 06-Nov-1994 08:49:37 GMT',
        rule: 'HTTP-date',
        expected: {
            name: 'HTTP-date',
            nodes: toNodes('Sun, 06-Nov-1994 08:49:37 GMT'),
        },
    },
]);
