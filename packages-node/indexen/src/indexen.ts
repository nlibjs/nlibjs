import * as path from 'path';
import * as fs from 'fs';
import {promisify} from 'util';
import {IConfiguration} from './types';

const stat = promisify(fs.stat);
const readdir = promisify(fs.readdir);
const writeFile = promisify(fs.writeFile);

const forEachFiles = async (
    file: string,
    callback: (file: string) => void,
): Promise<void> => {
    const stats = await stat(file);
    if (stats.isDirectory()) {
        for (const name of await readdir(file)) {
            await forEachFiles(path.join(file, name), callback);
        }
    } else if (stats.isFile()) {
        callback(file);
    }
};

export const indexen = async (
    config: IConfiguration,
): Promise<string> => {
    const lines = new Set<string>();
    const {filter, include, exclude, directory} = config;
    await forEachFiles(directory, (filePath) => {
        const relativePath = [
            '.',
            ...path.relative(directory, filePath).split(path.sep),
        ]
        .join('/');
        if (
            filePath !== config.dest
            && include.some((regexp) => regexp.test(relativePath))
            && exclude.every((regexp) => !regexp.test(relativePath))
        ) {
            lines.add(`export * from '${filter(relativePath)}';`);
        }
    });
    const code = [
        '// Generated by @nlib/indexen',
        ...lines,
        '',
    ].join('\n');
    if (config.dest) {
        await writeFile(config.dest, code);
    } else {
        process.stdout.write(code);
    }
    return code;
};
